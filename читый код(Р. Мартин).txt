глава 1 Чистый код:                                                                                                                                                                                                                                                                                                                                                                       глава 1 Чистый код:
- спешка порождает плохой код
- развивать в себе чувство кода, чтобы знать как сделать лучше
- чистый код - прямолинеен и читаем как книга
- хороший код - код который могут понять люди

глава 2 Содержательные имена:
- выбирать хорошие содержателные имена
- избегать ложных ассоциаций при выборе имен
- использовать префиксы, но не злоупотреблять
- имена клаасов - сущ., имена методов гл.+сущ.

глава 3 Функции:
- компактность
- 1 операция - 1 функция - 1 уровень абстракции
- стараться писать функции по снижению уровня абстракций
- аргументы в функциях должны стремиься к нулю (лайфхак: объекты как аргументы)
- использоват исключения, скрывать try/catch в отдельные функции
- не повторяйся

глава 4 Комментарии:
- должны быть кратки и по существу

глава 5 Форматирование:
- отступы между разными элементами в коде
- логически связанные элементы должны находится рядом
- размер файлов должен быть как можно меньше, чем меньше строк кода тем лучше
- строки кода не длинные

глава 6 Объекты и структуры данных:
- процедурный код лучше подходит для добавления новых методов без изменения структуры даных
- объектно-ориентированный код лучше подходит для содания новых классов(наборов данных) без изменения функций
- не все данные должны быть представлены в видде объектов и классов

глава 7 Обработка ошибок:
- при обработке ошибок использовать исключения try-catch-finaly
- передавать контекст в исключения для поиска ошибок

глава 8 Границы:
- при внедрении чужого кода можно писать тесты тем саммым его код

глава 9 Модульные тесты:
- Идея в подходе TDD - сначала тесты потом код продукта
- Следи за чистотой кодовой базу не только продукта но и тестов, если тесты плохо
написаны они похерят и код продукта
- Рефаткор кода нужен и в тестах
- Как функция должна выполнять одно действие так и тест должен выполнять одну проверку
- Чистые тесты стремятся к 5 св-вам: Быстрота выполнения, Независимость друг от друга, Повторяемость независимо от среды разработки, Очевидность результата, Своевременность написания (пишутся до кода продукта)

глава 10 Классы:
- классы так же как и функции должны быть компактными
- имя должно указывать на размер класса
- классы тоже нужно разделять
- изменения системы должны происходить посредством расширения системы, не затрагивать существующий код
- классы должны зависеть от абстракций

глава 11 Системы:
- разделяй ответственности в системе
- принцип единой отвественности, позволит сохранить гибкость системы
- ситсема должна быть модульной

глава 12 Формирование архитектуры:
- Правила хорошей системы
	1. Прохождение всех тестов
	2. Нет повторяющегося кода
	3. выражает намерения программиста
	4. имеет минимальное кол-во классов и методов
- Уделять внимание рефакторингу, так как через некоторое время тебе же и вспоминать какую задачу решал этот код

глава 13 Многопоточность:
- разделять потоки
- тестировать как можно больше и дольше разные сценарии
- применять ручное/автоматическое тестирование, тестирование большего числа потоков на меньшем кол-ве ядер

глава 14 Последовательное очищение:
- чтобы писать читсый код, нужно время от времени переключаться на глобальную картину проекта, дабы не написать ахинею
- рефакторинг начинать с малых правок
- использовать TDD

глава 15 Внутреннее строение JUnit:
- идеального кода нет, любой код можно улучшить

Типы паттернов:

Знакомство с паттернами:
- инкапсулировать изменяемые части кода

- 4 Способа организации между классами:
  Наследование: класс ЯВЯЛЕТСЯ наследником  класса-родителя. "Легковой автомобиль" имеет все свойства класса "автомобиль"
  Ассоциация: один класс включает в себя другой. "Автомобиль" ИМЕЕТ "двигатель"
  Композиция: когда "двигатель" не существует без "автомобиля". "Автомобиль" СОДЕРЖИТ в себе класс "двигатель".
  Агрегация: "двигатель" создается где-то в другой части кода и передается как параметр в класс "автомобиля"

1. Паттерн Стратегия:
  Используется для обеспечения принципа открытости/закрытости (чтобы классы могли расширяться, но не изменяться)


2. Паттерн Наблюдатель:
  Наблюдатели подписываются на субъект, при изменении его данных получают уведомление.
  Т.е. при изменении одного объекта прроисходит оповещение и обновление всех зависимых объектов

3. Паттерн Декоратор:
  Декоратор обертка над объектом, расширяет его методы

4. Паттерн Фабрика:
  Создание множества примерно одинаковых объектов выносится в отдельный класс (Имя_Factory). Так же есть подвиды: фабричный метод,
  абстрактная фабрика

5. Синглтон (одиночка): служит для создания уникальных объектов в единственном экземпляре

6. Паттерн Команда: позволяет инкапсулировать методы. По сути является ячейкой куда попадают команды, можно задать какие то параметр, а затем
  выполнить метод которых передавался

7. Паттерн Адаптер и Фасад:
  Адаптер - обортка над классом с нужным функционалом для использования с "чужим" интерфейсом. Он преобразует интерфейс класса
  к интерфейсу клиентом, обеспечивая тем самым взаимоействие классов.
  Фасад - Дает удобный интерфейс для управления, а всю сложную систему прячет за собой.

8. Паттерн Шаблонный метод: определяет основные шаги алгоритма. По сути класс(или просто главная функция) у которого есть главый метод,
  который содержит функции(шаги алгоритма)

9. Паттерн Итератор и Компоновщик:
  Итератор- предоставляет перебор эелементов коллекции(массив, объект, hashmap и т.д.) (методы next() и hasNext()), скрывая ее реализацию.
  Компоновщик - компонует множество объектов в дерево и рабоать с ними как с одним единственным объектом(деревом)

10. Паттерн Состояние: Позволяет объектам менять поведение в зависимости от общего состояние в котором находится программа
  Как пример можно взять автомат с жвачкой, в зависимости от состояния "крутилки" элемент выдачи реагирует по разному

11. Паттерн Заместитель: перехватывает вызов к оригинальному объекту и может что-то сделать до или после обращаения к ориг. объекту
  Похожи на интерсепторы в NestJS

12. MVC - (Model View Controller) - набор паттернов, таких как стратегия, компоновщик, наблюдатель и др.

13. Мост - применяется когда основной класс нужно расширить в 2-х и более разных направлениях(пример: марки и цвета), мост заменяет
  наследование(ЯВЯЛЕТСЯ) композицией(СОДЕРЖИТ) путем выделения этих направлений в отдельные иерархии(классы), посл чего ссылаться
  на объекты этих иерархий(т.е. при добавлении новых цветов не потребуется изменять модели)

14. Строитель - в него скидывают методы, которые отвечают за создание экзепляра класса(цвет, марка, двигатель и т.д.),
  чтобы не засорять конструктор класса. А на выходе получают удобный уинтерфейс для создания класса с параметрами

15. Цепочка обязанностей - создает цепочку объектов, которые последовательно анализируют запрос, если объект не может обработать,
  то запрос передается дальше по цепочке, пока не будет найден объект, который сможет его обработать

16. Приспособленец(Кеш) - служит для экономии памяти и когда состояние множества объектов одинаково, разделяет общее состояние объектов
  между собой. Если есть множество объектов с оддинаковым свойством/свойствами можно вынести это свойство в отдельный класс и связать
  его со всеми объектами

17. Интерпритатор - подойдет если требуется переводить команды с одного языка на другой

18. Посредник - централизует управление несколькими классами(классы теперь не знают о существовани друг друга),
  эти классы оповещают его о своем состоянии и отвечают на его запросы

19. Хранитель - хранит состояние к которому требуется вернуться в случае чего

20. Прототип - создает новые экземпляры путем создания редактируемой копии уже существующего экземпляра

21. Посетитель - расширяет функционал классов
